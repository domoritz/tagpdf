% \iffalse meta-comment
%
%% File: tagpdf-roles.dtx
%
% Copyright (C) 2019-2022 Ulrike Fischer
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "tagpdf bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/u-fischer/tagpdf
%
% for those people who are interested.
%<*driver>
\DocumentMetadata{}
\documentclass{l3doc}
\usepackage{array,booktabs,caption}
\hypersetup{pdfauthor=Ulrike Fischer,
 pdftitle=tagpdf-checks module (tagpdf)}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
% \title{^^A
%   The \pkg{tagpdf-roles} module\\ Tags, roles and namesspace code   ^^A
%   \\ Part of the tagpdf package
% }
%
% \author{^^A
%  Ulrike Fischer\thanks
%    {^^A
%      E-mail:
%        \href{mailto:fischer@troubleshooting-tex.de}
%          {fischer@troubleshooting-tex.de}^^A
%    }^^A
% }
%
% \date{Version 0.97, released 2022-08-24}
% \maketitle
% \begin{documentation}
% \begin{function}
%  {
%    add-new-tag (setup-key),
%    tag (rolemap-key),
%    namespace (rolemap-key),
%    role (rolemap-key),
%    role-namespace (rolemap-key)
%  }
% This key can be used in \cs{tagpdfsetup} to declare and rolemap new tags.
% It takes as value a key-value list or a simple |new-tag/old-tag|.
%
% The key-value list knows the following keys:
% \begin{description}
% \item[\texttt{tag}] This is the name of the new type as it should then be used in \cs{tagstructbegin}.
% \item[\texttt{namespace}] This is the namespace of the new type.
%   The value should be a shorthand of a namespace.
%   The allowed values are currently |pdf|, |pdf2|, |mathml|,|latex|, |latex-book| and |user|.
%   The default value (and recommended value for a new tag) is |user|.
%   The public name of the user namespace is |tag/NS/user|. This can be used to reference
%   the namespace e.g. in attributes.
% \item[\texttt{role}] This is the type the tag should be mapped too.
%  In a PDF 1.7 or earlier this is normally a type from the |pdf| set,
%  in PDF 2.0 from the |pdf|, |pdf2| and |mathml| set.
%  It can also be a user type, or a still unknown type.
%  The PDF format allows mapping to be done transitively.
%  But tagpdf can't/won't check such unusual role mapping.
% \item[\texttt{role-namespace}] If the role is a known type
%  the default value is the default namespace of this type.
%  If the role is unknown, |user| is used and
%  the code hopes that the type will be defined later. With this key a specific
%  namespace can be forced.
% \end{description}
% \end{function}
% \end{documentation}
% \begin{implementation}
%    \begin{macrocode}
%<@@=tag>
%<*header>
\ProvidesExplPackage {tagpdf-roles-code} {2022-08-24} {0.97}
 {part of tagpdf - code related to roles and structure names}
%</header>
%    \end{macrocode}
% \section{Code related to roles and structure names}
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
% \subsection{Variables}
% Tags have a name (a string), a number (for the lua attribute), and 
% in PDF 2.0 belong to one or more name spaces, with one being the default
% name space.
% Tags have also a type like grouping, inline or block level structure.
% The number is only relevant in lua and only for the MC type, 
% tags with the same name from different names spaces can have the same number.
%
% \begin{variable}{\g_@@_role_tags_NS_prop}
% This is basically the main list of tags. It uses tags as keys
% and the default name space as value. The value are shorthands like pdf2, or mathml.
% We store a name space also in pdf <2.0, even if not needed: it doesn't harm and simplify
% the code. 
% There is no need to access this from lua, so we use the standard prop commands.
%    \begin{macrocode}
\prop_new:N    \g_@@_role_tags_NS_prop 
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_role_tags_type_prop}
% This stores the type(s) of a tag. Tags that are rolemapped should get the type from
% the target.
%    \begin{macrocode}
\prop_new:N    \g_@@_role_tags_type_prop 
%    \end{macrocode}
% \end{variable}
% 
% \begin{variable}{\g_@@_role_NS_prop}
% This holds the list of supported name spaces.
% The keys are the name tagpdf will use, the values the object reference. 
% The urls identifier are stored in related dict object.
% \begin{description}
% \item[mathml] http://www.w3.org/1998/Math/MathML
% \item[pdf2]   http://iso.org/pdf2/ssn
% \item[pdf]    http://iso.org/pdf/ssn (default)
% \item[user]   \cs{c_@@_role_userNS_id_str} (random id, for user tags)
% \item[latex]  https://www.latex-project.org/ns/dflt/2022
% \item[latex-book] https://www.latex-project.org/ns/book/2022
% \item[latex-inline]     https://www.latex-project.org/ns/inline/2022
% \end{description}
% More namespaces are possible and
% their objects references and the ones of the namespaces must be collected
% so that an array can be written to the StructTreeRoot at the end (see tagpdf-tree).
% We use a prop to store also the object reference as it will be needed rather
% often.
%    \begin{macrocode}
\prop_new:N \g_@@_role_NS_prop 
%    \end{macrocode}
% \end{variable}
%
% We need also a bunch of temporary variables:
% \begin{variable}
%  {
%     ,\l_@@_role_tag_tmpa_tl
%     ,\l_@@_role_tag_namespace_tmpa_tl
%     ,\l_@@_role_role_tmpa_tl
%     ,\l_@@_role_role_namespace_tmpa_tl
%  }
%    \begin{macrocode}
\tl_new:N \l_@@_role_tag_tmpa_tl
\tl_new:N \l_@@_role_tag_namespace_tmpa_tl
\tl_new:N \l_@@_role_role_tmpa_tl
\tl_new:N \l_@@_role_role_namespace_tmpa_tl
%    \end{macrocode}
% \end{variable}
% \subsection{Namesspaces}
% The following commands setups a name space. Namespace dictionaries can
% contain an optional |/Schema| and |/RoleMapNS| entry. We only reserve the
% objects but delay the writing to the finish code, where we can test if the
% keys and the name spaces are actually needed.
% This commands setups objects for the name space and its rolemap. It also
% initialize a prop to collect the rolemaps if needed.
% \begin{function}{\@@_role_NS_new:nnn}
%  \begin{syntax}
%   \cs{@@_role_NS_new:nnn}\Arg{shorthand}\Arg{URI-ID}{Schema}
%  \end{syntax}
% \end{function}
% \begin{macro}{\@@_role_NS_new:nnn}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_role_NS_new:nnn #1 #2 #3
  {
    \pdf_object_new:n {tag/NS/#1}
    \pdfdict_new:n     {g_@@_role/Namespace_#1_dict}
    \pdf_object_new:n {@@/RoleMapNS/#1}
    \pdfdict_new:n     {g_@@_role/RoleMapNS_#1_dict}
    \pdfdict_gput:nnn
      {g_@@_role/Namespace_#1_dict}
      {Type}
      {/Namespace}
    \pdf_string_from_unicode:nnN{utf8/string}{#2}\l_@@_tmpa_str
    \tl_if_empty:NF \l_@@_tmpa_str
      {
        \pdfdict_gput:nnx
          {g_@@_role/Namespace_#1_dict}
          {NS}
          {\l_@@_tmpa_str}
      }
    %RoleMapNS is added in tree
    \tl_if_empty:nF  {#3}
     {
       \pdfdict_gput:nnx{g_@@_role/Namespace_#1_dict}
        {Schema}{#3}
     }
    \prop_gput:Nnx \g_@@_role_NS_prop {#1}{\pdf_object_ref:n{tag/NS/#1}~}
  }
%    \end{macrocode}
% \end{macro}
% We need an id for the user space. For the tests it should be possible
% to set it to a fix value. So we use random numbers which can
% be fixed by setting a seed. We fake a sort of
% GUID but not try to be really exact as it doesn't matter ...
%
% \begin{variable}{\c_@@_role_userNS_id_str}
%    \begin{macrocode}
\str_const:Nx \c_@@_role_userNS_id_str
  { data:,
    \int_to_Hex:n{\int_rand:n {65535}}
    \int_to_Hex:n{\int_rand:n {65535}}
    -
    \int_to_Hex:n{\int_rand:n {65535}}
    -
    \int_to_Hex:n{\int_rand:n {65535}}
    -
    \int_to_Hex:n{\int_rand:n {65535}}
    -
    \int_to_Hex:n{\int_rand:n {16777215}}
    \int_to_Hex:n{\int_rand:n {16777215}}
  }
%    \end{macrocode}
% \end{variable}
% Now we setup the standard names spaces. Currently only if we detect pdf2.0 but
% this will perhaps have to change if the structure code gets to messy.
%    \begin{macrocode}
\pdf_version_compare:NnT > {1.9}
  {
    \@@_role_NS_new:nnn {pdf}   {http://iso.org/pdf/ssn}{}
    \@@_role_NS_new:nnn {pdf2}  {http://iso.org/pdf2/ssn}{}
    \@@_role_NS_new:nnn {mathml}{http://www.w3.org/1998/Math/MathML}{}
    \@@_role_NS_new:nnn {latex} {https://www.latex-project.org/ns/dflt/2022}{}
    \@@_role_NS_new:nnn {latex-book} {https://www.latex-project.org/ns/book/2022}{}
   % \@@_role_NS_new:nnn {latex-inline} {https://www.latex-project.org/ns/inline/2022}{}
    \exp_args:Nnx
    \@@_role_NS_new:nnn {user}{\c_@@_role_userNS_id_str}{}
  }
%    \end{macrocode}
%
% \subsection{Data}
% In this section we setup the standard data.
% At first the list of structure types. We split them in three lists,
% the tags with which are both in the pdf and pdf2 namespace,
% the one only in pdf and the one with the tags only in pdf2.
% We also define a rolemap for the pdfII only type to pdf so that
% they can always be used.
% \begin{macro}{\@@_role_alloctag:n}
% By default this command does currently nothing. In the 
% lua backend it will record the attribute value.
%    \begin{macrocode}
\sys_if_engine_luatex:TF
 {
   \cs_new_protected:Npn \@@_role_alloctag:n #1 %#1 tagname
    {
      \lua_now:e { ltx.@@.func.alloctag ('#1') }
    }      
 }
 {   
  \cs_new_protected:Npn \@@_role_alloctag:n #1 %#1 tagname
    {
    }
 }      
%    \end{macrocode}
% \end{macro}
% 
%    \begin{macrocode}
\pdf_version_compare:NnTF > {1.9}
 {
   \cs_new_protected:Npn \@@_role_read_namespace_line:nw #1#2,#3,#4,#5,#6\q_stop %
    % #1 NS, #2 tag, #3 rolemap, #4 NS rolemap #5 type
    {
      \tl_if_empty:NF #2
       {
        \@@_role_alloctag:n {#2}
        \prop_gput:Nnn \g_@@_role_tags_NS_prop   {#2}{#1}
        \prop_gput:Nnn \g_@@_role_tags_type_prop {#2}{#5}
        \@@_role_add_tag:nnnn {#2}{#1}{#3}{#4} 
       }     
    }
 }
 {
  \cs_new_protected:Npn \@@_role_read_namespace_line:nw #1#2,#3,#4,#5,#6\q_stop %
   % #1 NS, #2 tag, #3 rolemap, #4 NS rolemap #5 type
    {
      \tl_if_empty:nF { #2 }
       {
        \@@_role_alloctag:n {#2}
        \prop_gput:Nnn \g_@@_role_tags_NS_prop   {#2}{#1}
        \prop_gput:Nnn \g_@@_role_tags_type_prop {#2}{#5}
        \tl_if_empty:nF {#3}
          { \@@_role_add_tag:nn {#2}{#3} }
        \typeout{#1!#2!#3!#4!#5!#6!}
       }     
    }
  }  
  
\cs_new_protected:Npn \@@_role_read_namespace:n #1 %name of namespace
  { 
    \file_if_exist:nT { tagpdf-ns-#1.txt}
     {
       \ior_open:Nn \g_tmpa_ior {tagpdf-ns-#1.txt}
       \ior_map_inline:Nn \g_tmpa_ior 
         {
           \@@_role_read_namespace_line:nw {#1} ##1,,,,\q_stop 
         }
       \ior_close:N\g_tmpa_ior    
     }
  }   
   
%    \end{macrocode}
% \begin{variable}
%   {
%     \c_@@_role_sttags_pdf_pdfII_clist,
%     \c_@@_role_sttags_only_pdf_clist,
%     \c_@@_role_sttags_only_pdfII_clist,
%     \c_@@_role_sttags_mathml_clist,
%     \c_@@_role_sttags_pdfII_to_pdf_prop
%   }
%    \begin{macrocode}
%
\clist_const:Nn \c_@@_role_sttags_pdf_pdfII_clist
  {
    Document,   %A complete document. This is the root element
                %of any structure tree containing
                %multiple parts or multiple articles.
    Part,       %A large-scale division of a document.
    Sect,       %A container for grouping related content elements.
    Div,        %A generic block-level element or group of elements
    Caption,    %A brief portion of text describing a table or figure.
    NonStruct,  %probably not needed
    H,
    H1,
    H2,
    H3,
    H4,
    H5,
    H6,
    P,
    L,           %list
    LI,          %list item (around label and list item body)
    Lbl,         %list label
    LBody,       %list item body
    Table,
    TR,          %table row
    TH,          %table header cell
    TD,          %table data cell
    THead,       %table header (n rows)
    TBody,       %table rows
    TFoot,       %table footer
    Span,        %generic inline marker
    Link,        %
    Annot,
    Figure,
    Formula,
    Form,
    % ruby warichu etc ..
    Ruby,
    RB,
    RT,
    Warichu,
    WT,
    WP,
    Artifact % only MC-tag ?...
  }

\clist_const:Nn \c_@@_role_sttags_only_pdf_clist
 {
   Art,        %A relatively self-contained body of text
               %constituting a single narrative or exposition
   BlockQuote, %A portion of text consisting of one or more paragraphs
               %attributed to someone other than the author of the
               %surrounding text.
   TOC,        %A list made up of table of contents item entries
               %(structure tag TOCI; see below) and/or other
               %nested table of contents entries
   TOCI,       %An individual member of a table of contents.
               %This entry's children can be any of the following structure  tags:
               %Lbl,Reference,NonStruct,P,TOC
   Index,
   Private,
   Quote,       %inline quote
   Note,        %footnote, endnote. Lbl can be child
   Reference,   %A citation to content elsewhere in the document.
   BibEntry,    %bibentry
   Code
 }

\clist_const:Nn \c_@@_role_sttags_only_pdfII_clist
 {
   DocumentFragment
   ,Aside
   ,H7
   ,H8
   ,H9
   ,H10
   ,Title
   ,FENote
   ,Sub
   ,Em
   ,Strong
   ,Artifact
 }

\clist_const:Nn \c_@@_role_sttags_mathml_clist
 {
   abs
   ,and
   ,annotation
   ,apply
   ,approx
   ,arccos
   ,arccosh
   ,arccot
   ,arccoth
   ,arccsc
   ,arccsch
   ,arcsec
   ,arcsech
   ,arcsin
   ,arcsinh
   ,arctan
   ,arctanh
   ,arg
   ,bind
   ,bvar
   ,card
   ,cartesianproduct
   ,cbytes
   ,ceiling
   ,cerror
   ,ci
   ,cn
   ,codomain
   ,complexes
   ,compose
   ,condition
   ,conjugate
   ,cos
   ,cosh
   ,cot
   ,coth
   ,cs
   ,csc
   ,csch
   ,csymbol
   ,curl
   ,declare
   ,degree
   ,determinant
   ,diff
   ,divergence
   ,divide
   ,domain
   ,domainofapplication
   ,emptyset
   ,eq
   ,equivalent
   ,eulergamma
   ,exists
   ,exp
   ,exponentiale
   ,factorial
   ,factorof
   ,false
   ,floor
   ,fn
   ,forall
   ,gcd
   ,geq
   ,grad
   ,gt
   ,ident
   ,image
   ,imaginary
   ,imaginaryi
   ,implies
   ,in
   ,infinity
   ,int
   ,integers
   ,intersect
   ,interval
   ,inverse
   ,lambda
   ,laplacian
   ,lcm
   ,leq
   ,limit
   ,ln
   ,log
   ,logbase
   ,lowlimit
   ,lt
   ,maction
   ,maligngroup
   ,malignmark
   ,math
   ,matrix
   ,matrixrow
   ,max
   ,mean
   ,median
   ,menclose
   ,merror
   ,mfenced
   ,mfrac
   ,mglyph
   ,mi
   ,min
   ,minus
   ,mlabeledtr
   ,mlongdiv
   ,mmultiscripts
   ,mn
   ,mo
   ,mode
   ,moment
   ,momentabout
   ,mover
   ,mpadded
   ,mphantom
   ,mprescripts
   ,mroot
   ,mrow
   ,ms
   ,mscarries
   ,mscarry
   ,msgroup
   ,msline
   ,mspace
   ,msqrt
   ,msrow
   ,mstack
   ,mstyle
   ,msub
   ,msubsup
   ,msup
   ,mtable
   ,mtd
   ,mtext
   ,mtr
   ,munder
   ,munderover
   ,naturalnumbers
   ,neq
   ,none
   ,not
   ,notanumber
   ,notin
   ,notprsubset
   ,notsubset
   ,or
   ,otherwise
   ,outerproduct
   ,partialdiff
   ,pi
   ,piece
   ,piecewise
   ,plus
   ,power
   ,primes
   ,product
   ,prsubset
   ,quotient
   ,rationals
   ,real
   ,reals
   ,reln
   ,rem
   ,root
   ,scalarproduct
   ,sdev
   ,sec
   ,sech
   ,selector
   ,semantics
   ,sep
   ,set
   ,setdiff
   ,share
   ,sin
   ,sinh
   ,subset
   ,sum
   ,tan
   ,tanh
   ,tendsto
   ,times
   ,transpose
   ,true
   ,union
   ,uplimit
   ,variance
   ,vector
   ,vectorproduct
   ,xor
 }

\prop_const_from_keyval:Nn \c_@@_role_sttags_pdfII_to_pdf_prop
  {
    DocumentFragment = Art,
    Aside = Note,
    Title = P,
    Sub   = Span,
    H7    = H6 ,
    H8    = H6 ,
    H9    = H6 ,
    H10   = H6,
    FENote= Note,
    Em    = Span,
    Strong= Span,
  }
%    \end{macrocode}
% \end{variable}

% \begin{variable}
%   {
%     \c_@@_role_sttags_latex_clist,
%     \c_@@_role_sttags_latex_book_clist,
%     \c_@@_role_sttags_latex_to_pdfII_prop,
%     \c_@@_role_sttags_latex_book_to_pdfII_prop,
%   }
% This will define the \LaTeX{} namespaces. This is work in progress
% and can still change. The default namespace will contain most
% of the mappings. The book namespace will contain needed extras like chapter.
% A book class can then exchange the default name space of the relevant tags.
%    \begin{macrocode}
\clist_const:Nn \c_@@_role_sttags_latex_clist
 {
%sectioning titles
   part,
   section,
   subsection,
   subsubsection,
   paragraph,
   subparagraph,
%lists
   tableofcontents,
   itemize,
   enumerate,
   description,
   item,
   itemlabel,
   itembody,
%footnotes
   footnote,
   footnotemark,
   footnotelabel
 }
\clist_const:Nn \c_@@_role_sttags_latex_book_clist
 {
   chapter
 }
\prop_const_from_keyval:Nn \c_@@_role_sttags_latex_to_pdfII_prop
  {
    title        = Title,
    part         = Title,
    section      = H1,
    subsection   = H2,
    subsubsection= H3,
    paragraph    = H4,
    subparagraph = H5,
    itemize      = L,
    enumerate    = L,
    description  = L,
    item         = LI,
    itemlabel    = Lbl,
    itembody     = LBody,
    footnote     = FENote,
    footnotemark = Lbl,
    footnotelabel= Lbl
  }
\prop_const_from_keyval:Nn \c_@@_role_sttags_latex_book_to_pdfII_prop
  {
    chapter      = H1,
    section      = H2,
    subsection   = H3,
    subsubsection= H4,
    paragraph    = H5,
    subparagraph = H6
  }
%    \end{macrocode}
% \end{variable}
% We fill the structure tags into the prop. We allow all pdf1.7 and pdf2.0,
% and role map if needed the 2.0 tags.
%    \begin{macrocode}

\clist_map_inline:Nn \c_@@_role_sttags_pdf_pdfII_clist
  {
    \@@_role_alloctag:n {#1}
    %\@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1 }
    \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ pdf2 }
  }
\clist_map_inline:Nn \c_@@_role_sttags_only_pdf_clist
  {
    \@@_role_alloctag:n {#1}
    %\@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1 }
    \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ pdf }
  }
\clist_map_inline:Nn \c_@@_role_sttags_only_pdfII_clist
  {
    \@@_role_alloctag:n {#1}
    %\@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1 }
    \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ pdf2 }
  }
\clist_map_inline:Nn \c_@@_role_sttags_latex_book_clist
  {
    \@@_role_alloctag:n {#1}
    %\@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1 }
    \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ latex-book }
  }
\clist_map_inline:Nn \c_@@_role_sttags_latex_clist
  {
    \@@_role_alloctag:n {#1}
    %\@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1 }
    \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ latex }
  }

\pdf_version_compare:NnT > {1.9}
  {
     \clist_map_inline:Nn \c_@@_role_sttags_mathml_clist
       {
         \@@_role_alloctag:n {#1}
         %\@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1 }
         \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ mathml }
       }
  }
%    \end{macrocode}
%
% \subsection{Adding new tags and rolemapping}
%
% \subsubsection{pdf 1.7 and earlier}
% With this versions only RoleMap is filled.
% At first the dictionary:
% \begin{variable}{g_@@_role/RoleMap_dict}
%    \begin{macrocode}
\pdfdict_new:n {g_@@_role/RoleMap_dict}
%    \end{macrocode}
% \end{variable}
% \begin{macro}{\@@_role_add_tag:nn}
% The pdf 1.7 version has only two arguments: new and rolemap name.
% To make pdf 2.0 types usable we directly define a rolemapping for them.
%
%    \begin{macrocode}
\cs_new_protected:Nn \@@_role_add_tag:nn %(new) name, reference to old
  {
    \prop_if_in:NnF \g_@@_role_tags_NS_prop {#1}
      {
        \int_compare:nNnT {\l_@@_loglevel_int} > { 0 }
          {
            \msg_info:nnn { tag }{new-tag}{#1}
          }
         \@@_role_alloctag:n {#1}  
         %\@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1 }
%         \@@_prop_gput:Nnx \g_@@_role_tags_NS_prop    { #1 }
%           {
%             %\seq_count:N \g_@@_role_tags_seq
%           }
         \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ user }
      }
    \@@_check_add_tag_role:nn {#1}{#2}
    \tl_if_empty:nF { #2 }
      {
        \pdfdict_gput:nnx {g_@@_role/RoleMap_dict}
          {#1}
          {\pdf_name_from_unicode_e:n{#2}}
      }
  }
\cs_generate_variant:Nn \@@_role_add_tag:nn {VV}

\pdf_version_compare:NnT < {2.0}
  {
     \prop_map_inline:Nn \c_@@_role_sttags_pdfII_to_pdf_prop
       {
         \@@_role_add_tag:nn {#1}{#2}
       }
     \prop_map_inline:Nn \c_@@_role_sttags_latex_to_pdfII_prop
       {
         \@@_role_add_tag:nn {#1}{#2}
       }
     \hook_gput_code:nnn {begindocument}{tagpdf}
      {
        \cs_if_exist:NT \chapter
         {
           \prop_map_inline:Nn\c_@@_role_sttags_latex_book_to_pdfII_prop
             {
               \@@_role_add_tag:nn {#1}{#2}
             }
         }
      }
  }

%    \end{macrocode}
% \end{macro}
% \subsubsection{The pdf 2.0 version}
% \begin{macro}{\@@_role_add_tag:nnnn}
% The pdf 2.0 version takes four arguments:
% tag/namespace/role/namespace
%    \begin{macrocode}
\cs_new_protected:Nn \@@_role_add_tag:nnnn %tag/namespace/role/namespace
  {
    \int_compare:nNnT {\l_@@_loglevel_int} > { 0 }
      {
        \msg_info:nnn { tag }{new-tag}{#1}
      }
    \@@_role_alloctag:n {#1}
    %\@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1 }
%    \@@_prop_gput:Nnx \g_@@_role_tags_prop    { #1 }
%       {
%         %\seq_count:N \g_@@_role_tags_seq
%       }
    \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ #2 }
    \@@_check_add_tag_role:nn {#1}{#3}
    \pdfdict_gput:nnx {g_@@_role/RoleMapNS_#2_dict}{#1}
       {
         [
           \pdf_name_from_unicode_e:n{#3}
           \c_space_tl
           \pdf_object_ref:n {tag/NS/#4}
         ]
       }
   }
\cs_generate_variant:Nn \@@_role_add_tag:nnnn {VVVV}
\@@_role_read_namespace:n {pdf}
%    \end{macrocode}
% \end{macro}
% \subsection{Rolemap the latex namespace}
% We setup both namespaces directly. The |latex| namespace is the default.
% If \cs{chapter} is detected we switch the default name space for the relevant
% tags.
%    \begin{macrocode}
\pdf_version_compare:NnT = {2.0}
  {
    \prop_map_inline:Nn \c_@@_role_sttags_latex_book_to_pdfII_prop
     {
        \@@_role_add_tag:nnnn { #1 }{latex-book}{#2}{pdf2}
     }
   \prop_map_inline:Nn \c_@@_role_sttags_latex_to_pdfII_prop
     {
       \@@_role_add_tag:nnnn { #1 }{latex}{#2}{pdf2}
     }
    \hook_gput_code:nnn {begindocument}{tagpdf}
      {
        \cs_if_exist:NT \chapter
         {
           \prop_map_inline:Nn \c_@@_role_sttags_latex_book_to_pdfII_prop
             {
               \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ latex-book }
             }
         }
      }
  }
%    \end{macrocode}
% \subsection{Key-val user interface}
%  The user interface uses the key |add-new-tag|, which takes either a
%  keyval list as argument, or a tag/role.
%  \begin{macro}
%    {
%     tag (rolemap-key),
%     tag-namespace (rolemap-key),
%     role (rolemap-key),
%     role-namespace (rolemap-key),
%     add-new-tag (setup-key)}
%    \begin{macrocode}
\keys_define:nn { @@ / tag-role }
  {
    ,tag .tl_set:N = \l_@@_role_tag_tmpa_tl
    ,tag-namespace  .tl_set:N = \l_@@_role_tag_namespace_tmpa_tl
    ,role .tl_set:N = \l_@@_role_role_tmpa_tl
    ,role-namespace .tl_set:N = \l_@@_role_role_namespace_tmpa_tl
  }

\keys_define:nn { @@ / setup }
  {
    add-new-tag .code:n =
     {
       \keys_set_known:nnnN
         {@@/tag-role}
         {
           tag-namespace=user,
           role-namespace=, %so that we can test for it.
          #1
         }{@@/tag-role}\l_tmpa_tl
       \tl_if_empty:NF \l_tmpa_tl
         {
           \exp_args:NNno \seq_set_split:Nnn \l_tmpa_seq { / } {\l_tmpa_tl/}
           \tl_set:Nx \l_@@_role_tag_tmpa_tl  { \seq_item:Nn \l_tmpa_seq {1} }
           \tl_set:Nx \l_@@_role_role_tmpa_tl { \seq_item:Nn \l_tmpa_seq {2} }
         }
      \tl_if_empty:NT \l_@@_role_role_namespace_tmpa_tl
         {
           \prop_get:NVNTF
             \g_@@_role_tags_NS_prop
             \l_@@_role_role_tmpa_tl
             \l_@@_role_role_namespace_tmpa_tl
             {
                \prop_if_in:NVF\g_@@_role_NS_prop \l_@@_role_role_namespace_tmpa_tl
                 {
                   \tl_set:Nn \l_@@_role_role_namespace_tmpa_tl {user}
                 }
             }
             {
               \tl_set:Nn \l_@@_role_role_namespace_tmpa_tl {user}
             }
         }
      \pdf_version_compare:NnTF < {2.0}
       {
        %TODO add check for emptyness?
          \@@_role_add_tag:VV
              \l_@@_role_tag_tmpa_tl
              \l_@@_role_role_tmpa_tl
       }
       {
         \@@_role_add_tag:VVVV
           \l_@@_role_tag_tmpa_tl
           \l_@@_role_tag_namespace_tmpa_tl
           \l_@@_role_role_tmpa_tl
           \l_@@_role_role_namespace_tmpa_tl
       }
    }
  }
%</package>
%    \end{macrocode}
% \end{macro}
% \end{implementation}
% \PrintIndex
